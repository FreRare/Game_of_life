import statistics


class Playlist(object):
    def __init__(self, length: int = 0, musics: list = None):
        if isinstance(length, int):
            self.length = length
        if isinstance(musics, list) and isinstance(musics[0], dict):
            self.musics = musics
        else:
            self.musics = None

    def read_in_musics(self, filename: str):
        if not isinstance(filename, str):
            print("Invalid filename!")
            return
        if self.musics is None:
            self.musics = []
        with open(filename, "r") as f:
            row = f.readline()
            while row:
                track = row.split(";")
                music = dict()
                music["artist"] = str(track[0])
                music["title"] = str(track[1])
                music["style"] = str(track[2])
                music["length"] = int(track[3])
                self.musics.append(music)
                row = f.readline()
        print(f"The playlist is read in successfully!")

    def total_length(self):
        for track in self.musics:
            self.length += track.get("length")
        minute = self.length // 60
        second = self.length % 60
        with open("total_length.txt", "w") as h:
            h.write(f"The total length of the playlist is: {minute} minute(s), {second} second(s)\n")
        print(f"The total length of the playlist is: {minute} minute(s), {second} second(s)")

    def longest_rock(self):
        with open("longest_rock.txt", "w") as lr:
            longest = next((track for track in self.musics if track["length"] == max((map(lambda track: track["length"] if track["style"] == "rock" else 0, self.musics))) and track["style"] == "rock"), None)
            if longest is None:
                raise ValueError()
            lr.write(longest["title"] + "\n")
            print(f"Found the longest rock: {longest['title']}")

    def favourite_style(self):
        style = statistics.mode(map(lambda track: track["style"], self.musics))
        print(f"Found the style: {style}")

    def list_by_artist(self, artist: str):
        if not isinstance(artist, str):
            print(f"Error! Invalid artist name: {artist}")
            return
        if next((track for track in self.musics if track["artist"].lower() == artist.lower()), None) is None:
            print(f"Artist not found! ({artist})")
            return
        with open(artist.lower().replace(" ", "_") + "_songs.txt", "w") as lbs:
            for track in self.musics:
                if track["artist"].lower() == artist.lower():
                    print(";".join(str(t) for t in track.values()))
                    lbs.write(";".join(str(t) for t in track.values()) + "\n")
