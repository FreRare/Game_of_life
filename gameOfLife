from typing import Tuple, List, Optional, Dict


class TooBigError(Exception):
    ...


class World(object):
    def __init__(self, size):
        self.cells: Dict[Tuple[int, int], Cell] = {
            (0, 0): Cell(),
            (0, 12): Cell(),
            (3, 0): Cell()
        }
        self.size = size

    def __str__(self):
        cell_list: List[List[Optional[Cell]]] = []
        for x in range(self.size):
            row = []
            for y in range(self.size):
                row.append(self.cells.get((x, y), None))
            cell_list.append(row)

        text = ""
        for row in cell_list:
            for col in row:
                if col is not None:
                    text += col.as_char()
                else:
                    text += "."
            text += "\n"
        return text

    def dump(self, filename: str):
        with open(filename, 'w', encoding="utf8") as file:
            for (x, y), cell in self.cells.items():
                if x > self.size or y > self.size:
                    raise TooBigError()
                file.write(f"{type(cell).__name__},{x},{y}\n")


class Cell(object):
    def __init__(self):
        self.state = "alive"

    def __str__(self):
        return f"the cell is {self.state}"

    def as_char(self):
        return '@'


def main():
    my_world = World(10)
    temp = str(my_world)
    print(my_world)
    try:
        my_world.dump("test.txt")
    except TooBigError as tbe:
        print("Index out of range!")


if __name__ == "__main__":
    main()
